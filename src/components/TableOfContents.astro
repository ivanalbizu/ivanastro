---
import type { Heading } from '@utils/table-of-contents';

interface Props {
  headings: Heading[];
}

const { headings } = Astro.props;
---

{headings.length > 0 && (
  <nav class="table-of-contents">
    <h2 class="toc-title">Índice de contenidos</h2>
    <ol class="toc-list">
      {headings.map(heading => (
        <li class={`toc-item toc-level-${heading.depth}`}>
          <a href={`#${heading.slug}`} class="toc-link">
            {heading.text}
          </a>
        </li>
      ))}
    </ol>
  </nav>
)}

<script>
  // Add smooth scrolling and highlight active section
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        const targetElement = targetId ? document.getElementById(targetId) : null;
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without jumping
          history.pushState(null, '', `#${targetId}`);
        }
      });
    });

    // Highlight current section on scroll
    const observerOptions = {
      rootMargin: '-20% 0px -70% 0px'
    };

    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);
        
        if (tocLink) {
          if (entry.isIntersecting) {
            // Remove all active classes
            document.querySelectorAll('.toc-link').forEach(link => {
              link.classList.remove('active');
            });
            // Add active class to current link
            tocLink.classList.add('active');
          }
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observe all headings
    document.querySelectorAll('h2[id], h3[id]').forEach(heading => {
      observer.observe(heading);
    });
  });
</script>

<style lang="scss">
  .table-of-contents {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: calc(var(--grid-unit) * 2);
    margin-bottom: calc(var(--grid-unit) * 4);
  }

  .toc-title {
    font-family: var(--font-family-primary);
    font-size: var(--fs-paragraph-1);
    font-weight: 700;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.03em;
    margin-bottom: calc(var(--grid-unit) * 2);
    padding-bottom: calc(var(--grid-unit));
    border-bottom: var(--border-width-md) solid var(--color-accent);
  }

  .toc-list {
    margin: 0;
    padding: 0;
    list-style-type: "";
    counter-reset: toc-counter;
    :last-child {
      margin-block-end: 0;
    }
  }

  .toc-item {
    margin-bottom: calc(var(--grid-unit));
    counter-increment: toc-counter;
    position: relative;
    &::before {
      content: counter(toc-counter) ".";
      position: absolute;
      left: 0;
      font-family: var(--font-mono);
      font-size: var(--fs-paragraph-4);
      color: var(--color-text-muted);
      font-weight: 700;
    }
  }

  .toc-link {
    display: block;
    padding-left: calc(var(--grid-unit) * 3);
    color: var(--color-text-primary);
    text-decoration-color: transparent;
    line-height: 1.6;
    transition: all var(--transition-duration-normal) ease;
    &:hover,
    &:focus {
      color: var(--color-interaction-default);
    }

    &.active {
      color: var(--color-interaction-default);
      font-weight: 700;
      &::after {
        content: "•";
        position: absolute;
        right: 0;
        color: var(--color-interaction-default);
      }
    }
  }

  .toc-level-3 {
    margin-left: calc(var(--grid-unit) * 2);
    .toc-link {
      font-size: var(--fs-paragraph-3);
      color: var(--color-text-secondary);
      &:hover,
      &:focus {
        color: var(--color-interaction-default);
      }
    }
  }

  @media (min-width: 768px) {
    .table-of-contents {
      padding: calc(var(--grid-unit) * 3);
    }
  }
</style>