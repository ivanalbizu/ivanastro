---
import type { HTMLTag } from 'astro/types';

import { getCollection } from "astro:content";

export interface Props {
  limitRecentCategories?: number;
  tag?: HTMLTag;
}

const {
  tag: Element = 'h2',
  limitRecentCategories = 9999,
  ...props
} = Astro.props;

const base = import.meta.env.BASE_URL;

// Get all blog posts
const posts = await getCollection("blog");

// Extract all categories from posts
const allCategories = new Set<string>();
posts.forEach((post: any) => {
  if (post.data.categories) {
    post.data.categories.forEach((category: string) => {
      allCategories.add(category);
    });
  }
});

// Create category map with post counts
const categoryMap: Record<string, any[]> = {};
Array.from(allCategories).forEach((category: string) => {
  categoryMap[category] = posts.filter((post: any) => 
    post.data.categories && post.data.categories.includes(category)
  );
});

// Sort categories by post count (descending) then alphabetically
const sortedCategories = Object.entries(categoryMap)
  .sort((a: any, b: any) => {
    if (b[1].length !== a[1].length) {
      return b[1].length - a[1].length;
    }
    return a[0].localeCompare(b[0]);
  })
  .slice(0, limitRecentCategories);
---

<div class="categories-grid">
  {sortedCategories.map(([category, posts]: [string, any[]]) => (
    <div class="category-card">
      <a href={`${base}categorias/${category.toLowerCase().replace(/[\/\s]+/g, '-')}`} class="category-link">
        <Element {...props} class="category-title">{category}</Element>
        <p class="category-count">
          {posts.length} entrada{posts.length === 1 ? '' : 's'}
        </p>
      </a>
    </div>
  ))}
</div>

{sortedCategories.length === 0 && (
  <div class="no-categories">
    <p>No se encontraron categor√≠as.</p>
  </div>
)}

<style lang="scss">
  .categories-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: calc(var(--grid-unit) * 2);
  }

  .category-card {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 6px;
    transition: transform var(--transition-duration-normal) ease, border-color var(--transition-duration-normal) ease, box-shadow var(--transition-duration-normal) ease;
    overflow: hidden;
    &:hover,
    &:focus,
    &:focus-within {
      border-color: var(--color-interaction-default);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
  }

  .category-link {
    display: block;
    padding: calc(var(--grid-unit) * 2);
    text-decoration-color: transparent;
    color: inherit;
    &:hover .category-title {
      color: var(--color-interaction-default);
    }
  }

  .category-title {
    font-family: var(--font-family-primary);
    font-size: var(--fs-paragraph-1);
    font-weight: 700;
    margin-bottom: calc(var(--grid-unit) / 2);
    letter-spacing: 0.03em;
    color: var(--color-text-primary);
    transition: color var(--transition-duration-normal) ease;
  }

  .category-count {
    font-family: var(--font-mono);
    font-size: var(--fs-paragraph-5);
    color: var(--color-text-muted);
    letter-spacing: 0.03em;
    margin: 0;
  }

  .no-categories {
    text-align: center;
    padding: calc(var(--grid-unit) * 6);
    color: var(--color-text-muted);
  }

  @media (min-width: 768px) {
    .categories-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
  }
</style>
