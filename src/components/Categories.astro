---
import type { HTMLTag } from 'astro/types';
import Button from "@components/Button.astro";


import { getCollection } from "astro:content";

export interface Props {
  limitRecentCategories?: number;
  tag?: HTMLTag;
}

const {
  tag: Element = 'h2',
  limitRecentCategories = 9999,
  ...props
} = Astro.props;

const base = import.meta.env.BASE_URL;

// Get all blog posts
const posts = await getCollection("blog");

// Extract all categories from posts
const allCategories = new Set<string>();
posts.forEach((post: any) => {
  if (post.data.categories) {
    post.data.categories.forEach((category: string) => {
      allCategories.add(category);
    });
  }
});

// Create category map with post counts
const categoryMap: Record<string, any[]> = {};
Array.from(allCategories).forEach((category: string) => {
  categoryMap[category] = posts.filter((post: any) => 
    post.data.categories && post.data.categories.includes(category)
  );
});

// Sort categories by post count (descending) then alphabetically
const sortedCategories = Object.entries(categoryMap)
  .sort((a: any, b: any) => {
    if (b[1].length !== a[1].length) {
      return b[1].length - a[1].length;
    }
    return a[0].localeCompare(b[0]);
  })
  .slice(0, limitRecentCategories);
---

<div class="categories-grid">
  {sortedCategories.map(([category, posts]: [string, any[]]) => (
    <Button tag="a" variant="secondary" href={`${base}categorias/${category.toLowerCase().replace(/[\/\s]+/g, '-')}`} hasChevron class="icon chevron">
      <span class="counter">
        <span class="counter__top">
          {category}
        </span>
        <span class="counter__bottom">
          {posts.length} entrada{posts.length === 1 ? '' : 's'}
        </span>
      </span>
    </Button>
  ))}
</div>

{sortedCategories.length === 0 && (
  <div class="no-categories">
    <p>No se encontraron categor√≠as.</p>
  </div>
)}

<style lang="scss">
  .counter {
    display: flex;
    flex-direction: column;
    line-height: 1.4;
    &__top {
      text-transform: uppercase;
    }
    &__bottom {
      font-size: 0.85em;
      color: var(--color-text-muted);
      line-height: 1;
    }
  }
  .categories-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: calc(var(--grid-unit) * 2);
  }

  .no-categories {
    text-align: center;
    padding: calc(var(--grid-unit) * 6);
    color: var(--color-text-muted);
  }

  @media (min-width: 768px) {
    .categories-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
  }
</style>
